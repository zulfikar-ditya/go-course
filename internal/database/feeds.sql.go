// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: feeds.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createNewFeed = `-- name: CreateNewFeed :one
INSERT INTO feeds (id, user_id, url, name, created_at, updated_at) 
VALUES ($1, $2, $3, $4, $5, $6) 
RETURNING id, user_id, url, name, created_at, updated_at, last_fetch_at
`

type CreateNewFeedParams struct {
	ID        uuid.UUID
	UserID    uuid.UUID
	Url       string
	Name      string
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) CreateNewFeed(ctx context.Context, arg CreateNewFeedParams) (Feed, error) {
	row := q.db.QueryRowContext(ctx, createNewFeed,
		arg.ID,
		arg.UserID,
		arg.Url,
		arg.Name,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Feed
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Url,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastFetchAt,
	)
	return i, err
}

const getFeedById = `-- name: GetFeedById :one
SELECT id, user_id, url, name, created_at, updated_at, last_fetch_at FROM feeds WHERE id = $1
`

func (q *Queries) GetFeedById(ctx context.Context, id uuid.UUID) (Feed, error) {
	row := q.db.QueryRowContext(ctx, getFeedById, id)
	var i Feed
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Url,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastFetchAt,
	)
	return i, err
}

const getFeeds = `-- name: GetFeeds :many
SELECT id, user_id, url, name, created_at, updated_at, last_fetch_at FROM feeds ORDER BY created_at DESC
`

func (q *Queries) GetFeeds(ctx context.Context) ([]Feed, error) {
	rows, err := q.db.QueryContext(ctx, getFeeds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Feed
	for rows.Next() {
		var i Feed
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Url,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.LastFetchAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getNextFeedToFetch = `-- name: GetNextFeedToFetch :one
SELECT id, user_id, url, name, created_at, updated_at, last_fetch_at FROM feeds ORDER BY last_fetch_at DESC NULLS FIRST LIMIT 1
`

func (q *Queries) GetNextFeedToFetch(ctx context.Context) (Feed, error) {
	row := q.db.QueryRowContext(ctx, getNextFeedToFetch)
	var i Feed
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Url,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastFetchAt,
	)
	return i, err
}

const updateLastFetchFeed = `-- name: UpdateLastFetchFeed :one
UPDATE feeds SET 
last_fetch_at = NOW(),
updated_at = NOW()
WHERE id = $1
RETURNING id, user_id, url, name, created_at, updated_at, last_fetch_at
`

func (q *Queries) UpdateLastFetchFeed(ctx context.Context, id uuid.UUID) (Feed, error) {
	row := q.db.QueryRowContext(ctx, updateLastFetchFeed, id)
	var i Feed
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Url,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastFetchAt,
	)
	return i, err
}
